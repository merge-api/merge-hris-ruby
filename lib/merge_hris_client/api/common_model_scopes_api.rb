=begin
#Merge HRIS API

#The unified API for building rich integrations with multiple HR Information System platforms.

The version of the OpenAPI document: 1.0
Contact: hello@merge.dev
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.1.1

=end

require 'cgi'

module MergeHRISClient
  class CommonModelScopesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Update the configuration of what data is saved by Merge when syncing. Common model scopes are set as a default across all linked accounts, but can be updated to have greater granularity per account.
    # @param common_model_scopes_update_serializer [CommonModelScopesUpdateSerializer] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :linked_account_id ID of specific linked account to fetch
    # @return [CommonModelScopes]
    def common_model_scopes_create(common_model_scopes_update_serializer, opts = {})
      data, _status_code, _headers = common_model_scopes_create_with_http_info(common_model_scopes_update_serializer, opts)
      data
    end

    # Update the configuration of what data is saved by Merge when syncing. Common model scopes are set as a default across all linked accounts, but can be updated to have greater granularity per account.
    # @param common_model_scopes_update_serializer [CommonModelScopesUpdateSerializer] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :linked_account_id ID of specific linked account to fetch
    # @return [Array<(CommonModelScopes, Integer, Hash)>] CommonModelScopes data, response status code and response headers
    def common_model_scopes_create_with_http_info(common_model_scopes_update_serializer, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CommonModelScopesApi.common_model_scopes_create ...'
      end
      # verify the required parameter 'common_model_scopes_update_serializer' is set
      if @api_client.config.client_side_validation && common_model_scopes_update_serializer.nil?
        fail ArgumentError, "Missing the required parameter 'common_model_scopes_update_serializer' when calling CommonModelScopesApi.common_model_scopes_create"
      end
      # resource path
      local_var_path = '/common-model-scopes'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'linked_account_id'] = opts[:'linked_account_id'] if !opts[:'linked_account_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(common_model_scopes_update_serializer)

      # return_type
      return_type = opts[:debug_return_type] || 'CommonModelScopes'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['tokenAuth']

      new_options = opts.merge(
        :operation => :"CommonModelScopesApi.common_model_scopes_create",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CommonModelScopesApi#common_model_scopes_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch the configuration of what data is saved by Merge when syncing. Common model scopes are set as a default across all linked accounts, but can be updated to have greater granularity per account.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :linked_account_id ID of specific linked account to fetch
    # @return [CommonModelScopes]
    def common_model_scopes_retrieve(opts = {})
      data, _status_code, _headers = common_model_scopes_retrieve_with_http_info(opts)
      data
    end

    # Fetch the configuration of what data is saved by Merge when syncing. Common model scopes are set as a default across all linked accounts, but can be updated to have greater granularity per account.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :linked_account_id ID of specific linked account to fetch
    # @return [Array<(CommonModelScopes, Integer, Hash)>] CommonModelScopes data, response status code and response headers
    def common_model_scopes_retrieve_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CommonModelScopesApi.common_model_scopes_retrieve ...'
      end
      # resource path
      local_var_path = '/common-model-scopes'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'linked_account_id'] = opts[:'linked_account_id'] if !opts[:'linked_account_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CommonModelScopes'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['tokenAuth']

      new_options = opts.merge(
        :operation => :"CommonModelScopesApi.common_model_scopes_retrieve",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CommonModelScopesApi#common_model_scopes_retrieve\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
