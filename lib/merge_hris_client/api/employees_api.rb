=begin
#Merge HRIS API

#The unified API for building rich integrations with multiple HR Information System platforms.

The version of the OpenAPI document: 1.0
Contact: hello@merge.dev
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.1.1

=end

require 'cgi'

module MergeHRISClient
  class EmployeesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Creates an `Employee` object with the given values.
    # @param x_account_token [String] Token identifying the end user.
    # @param employee_endpoint_request [EmployeeEndpointRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :is_debug_mode Whether to include debug fields (such as log file links) in the response.
    # @option opts [Boolean] :run_async Whether or not third-party updates should be run asynchronously.
    # @return [EmployeeResponse]
    def employees_create(x_account_token, employee_endpoint_request, opts = {})
      data, _status_code, _headers = employees_create_with_http_info(x_account_token, employee_endpoint_request, opts)
      data
    end

    # Creates an &#x60;Employee&#x60; object with the given values.
    # @param x_account_token [String] Token identifying the end user.
    # @param employee_endpoint_request [EmployeeEndpointRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :is_debug_mode Whether to include debug fields (such as log file links) in the response.
    # @option opts [Boolean] :run_async Whether or not third-party updates should be run asynchronously.
    # @return [Array<(EmployeeResponse, Integer, Hash)>] EmployeeResponse data, response status code and response headers
    def employees_create_with_http_info(x_account_token, employee_endpoint_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployeesApi.employees_create ...'
      end
      # verify the required parameter 'x_account_token' is set
      if @api_client.config.client_side_validation && x_account_token.nil?
        fail ArgumentError, "Missing the required parameter 'x_account_token' when calling EmployeesApi.employees_create"
      end
      # verify the required parameter 'employee_endpoint_request' is set
      if @api_client.config.client_side_validation && employee_endpoint_request.nil?
        fail ArgumentError, "Missing the required parameter 'employee_endpoint_request' when calling EmployeesApi.employees_create"
      end
      # resource path
      local_var_path = '/employees'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'is_debug_mode'] = opts[:'is_debug_mode'] if !opts[:'is_debug_mode'].nil?
      query_params[:'run_async'] = opts[:'run_async'] if !opts[:'run_async'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])
      header_params[:'X-Account-Token'] = x_account_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(employee_endpoint_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EmployeeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['tokenAuth']

      new_options = opts.merge(
        :operation => :"EmployeesApi.employees_create",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployeesApi#employees_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Ignores a specific row based on the `model_id` in the url. These records will have their properties set to null, and will not be updated in future syncs. The \"reason\" and \"message\" fields in the request body will be stored for audit purposes.
    # @param x_account_token [String] Token identifying the end user.
    # @param model_id [String] 
    # @param ignore_common_model_request [IgnoreCommonModelRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def employees_ignore_create(x_account_token, model_id, ignore_common_model_request, opts = {})
      employees_ignore_create_with_http_info(x_account_token, model_id, ignore_common_model_request, opts)
      nil
    end

    # Ignores a specific row based on the &#x60;model_id&#x60; in the url. These records will have their properties set to null, and will not be updated in future syncs. The \&quot;reason\&quot; and \&quot;message\&quot; fields in the request body will be stored for audit purposes.
    # @param x_account_token [String] Token identifying the end user.
    # @param model_id [String] 
    # @param ignore_common_model_request [IgnoreCommonModelRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def employees_ignore_create_with_http_info(x_account_token, model_id, ignore_common_model_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployeesApi.employees_ignore_create ...'
      end
      # verify the required parameter 'x_account_token' is set
      if @api_client.config.client_side_validation && x_account_token.nil?
        fail ArgumentError, "Missing the required parameter 'x_account_token' when calling EmployeesApi.employees_ignore_create"
      end
      # verify the required parameter 'model_id' is set
      if @api_client.config.client_side_validation && model_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_id' when calling EmployeesApi.employees_ignore_create"
      end
      # verify the required parameter 'ignore_common_model_request' is set
      if @api_client.config.client_side_validation && ignore_common_model_request.nil?
        fail ArgumentError, "Missing the required parameter 'ignore_common_model_request' when calling EmployeesApi.employees_ignore_create"
      end
      # resource path
      local_var_path = '/employees/ignore/{model_id}'.sub('{' + 'model_id' + '}', CGI.escape(model_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])
      header_params[:'X-Account-Token'] = x_account_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ignore_common_model_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['tokenAuth']

      new_options = opts.merge(
        :operation => :"EmployeesApi.employees_ignore_create",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployeesApi#employees_ignore_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a list of `Employee` objects.
    # @param x_account_token [String] Token identifying the end user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :company_id If provided, will only return employees for this company.
    # @option opts [Time] :created_after If provided, will only return objects created after this datetime.
    # @option opts [Time] :created_before If provided, will only return objects created before this datetime.
    # @option opts [String] :cursor The pagination cursor value.
    # @option opts [String] :display_full_name If provided, will only return employees with this display name.
    # @option opts [String] :employment_status If provided, will only return employees with this employment status.  * &#x60;ACTIVE&#x60; - ACTIVE * &#x60;PENDING&#x60; - PENDING * &#x60;INACTIVE&#x60; - INACTIVE
    # @option opts [String] :employment_type If provided, will only return employees that have an employment of the specified employment_type.
    # @option opts [String] :expand Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
    # @option opts [String] :first_name If provided, will only return employees with this first name.
    # @option opts [String] :groups If provided, will only return employees matching the group ids; multiple groups can be separated by commas.
    # @option opts [String] :home_location_id If provided, will only return employees for this home location.
    # @option opts [Boolean] :include_deleted_data Whether to include data that was marked as deleted by third party webhooks.
    # @option opts [Boolean] :include_remote_data Whether to include the original data Merge fetched from the third-party to produce these models.
    # @option opts [Boolean] :include_sensitive_fields Whether to include sensitive fields (such as social security numbers) in the response.
    # @option opts [String] :job_title If provided, will only return employees that have an employment of the specified job_title.
    # @option opts [String] :last_name If provided, will only return employees with this last name.
    # @option opts [String] :manager_id If provided, will only return employees for this manager.
    # @option opts [Time] :modified_after If provided, only objects synced by Merge after this date time will be returned.
    # @option opts [Time] :modified_before If provided, only objects synced by Merge before this date time will be returned.
    # @option opts [Integer] :page_size Number of results to return per page.
    # @option opts [String] :pay_group_id If provided, will only return employees for this pay group
    # @option opts [String] :personal_email If provided, will only return Employees with this personal email
    # @option opts [String] :remote_fields Deprecated. Use show_enum_origins.
    # @option opts [String] :remote_id The API provider&#39;s ID for the given object.
    # @option opts [String] :show_enum_origins A comma separated list of enum field names for which you&#39;d like the original values to be returned, instead of Merge&#39;s normalized enum values. [Learn more](https://help.merge.dev/en/articles/8950958-show_enum_origins-query-parameter)
    # @option opts [Time] :started_after If provided, will only return employees that started after this datetime.
    # @option opts [Time] :started_before If provided, will only return employees that started before this datetime.
    # @option opts [String] :team_id If provided, will only return employees for this team.
    # @option opts [Time] :terminated_after If provided, will only return employees that were terminated after this datetime.
    # @option opts [Time] :terminated_before If provided, will only return employees that were terminated before this datetime.
    # @option opts [String] :work_email If provided, will only return Employees with this work email
    # @option opts [String] :work_location_id If provided, will only return employees for this location.
    # @return [PaginatedEmployeeList]
    def employees_list(x_account_token, opts = {})
      data, _status_code, _headers = employees_list_with_http_info(x_account_token, opts)
      data
    end

    # Returns a list of &#x60;Employee&#x60; objects.
    # @param x_account_token [String] Token identifying the end user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :company_id If provided, will only return employees for this company.
    # @option opts [Time] :created_after If provided, will only return objects created after this datetime.
    # @option opts [Time] :created_before If provided, will only return objects created before this datetime.
    # @option opts [String] :cursor The pagination cursor value.
    # @option opts [String] :display_full_name If provided, will only return employees with this display name.
    # @option opts [String] :employment_status If provided, will only return employees with this employment status.  * &#x60;ACTIVE&#x60; - ACTIVE * &#x60;PENDING&#x60; - PENDING * &#x60;INACTIVE&#x60; - INACTIVE
    # @option opts [String] :employment_type If provided, will only return employees that have an employment of the specified employment_type.
    # @option opts [String] :expand Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
    # @option opts [String] :first_name If provided, will only return employees with this first name.
    # @option opts [String] :groups If provided, will only return employees matching the group ids; multiple groups can be separated by commas.
    # @option opts [String] :home_location_id If provided, will only return employees for this home location.
    # @option opts [Boolean] :include_deleted_data Whether to include data that was marked as deleted by third party webhooks.
    # @option opts [Boolean] :include_remote_data Whether to include the original data Merge fetched from the third-party to produce these models.
    # @option opts [Boolean] :include_sensitive_fields Whether to include sensitive fields (such as social security numbers) in the response.
    # @option opts [String] :job_title If provided, will only return employees that have an employment of the specified job_title.
    # @option opts [String] :last_name If provided, will only return employees with this last name.
    # @option opts [String] :manager_id If provided, will only return employees for this manager.
    # @option opts [Time] :modified_after If provided, only objects synced by Merge after this date time will be returned.
    # @option opts [Time] :modified_before If provided, only objects synced by Merge before this date time will be returned.
    # @option opts [Integer] :page_size Number of results to return per page.
    # @option opts [String] :pay_group_id If provided, will only return employees for this pay group
    # @option opts [String] :personal_email If provided, will only return Employees with this personal email
    # @option opts [String] :remote_fields Deprecated. Use show_enum_origins.
    # @option opts [String] :remote_id The API provider&#39;s ID for the given object.
    # @option opts [String] :show_enum_origins A comma separated list of enum field names for which you&#39;d like the original values to be returned, instead of Merge&#39;s normalized enum values. [Learn more](https://help.merge.dev/en/articles/8950958-show_enum_origins-query-parameter)
    # @option opts [Time] :started_after If provided, will only return employees that started after this datetime.
    # @option opts [Time] :started_before If provided, will only return employees that started before this datetime.
    # @option opts [String] :team_id If provided, will only return employees for this team.
    # @option opts [Time] :terminated_after If provided, will only return employees that were terminated after this datetime.
    # @option opts [Time] :terminated_before If provided, will only return employees that were terminated before this datetime.
    # @option opts [String] :work_email If provided, will only return Employees with this work email
    # @option opts [String] :work_location_id If provided, will only return employees for this location.
    # @return [Array<(PaginatedEmployeeList, Integer, Hash)>] PaginatedEmployeeList data, response status code and response headers
    def employees_list_with_http_info(x_account_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployeesApi.employees_list ...'
      end
      # verify the required parameter 'x_account_token' is set
      if @api_client.config.client_side_validation && x_account_token.nil?
        fail ArgumentError, "Missing the required parameter 'x_account_token' when calling EmployeesApi.employees_list"
      end
      allowable_values = ["ACTIVE", "INACTIVE", "PENDING"]
      if @api_client.config.client_side_validation && opts[:'employment_status'] && !allowable_values.include?(opts[:'employment_status'])
        fail ArgumentError, "invalid value for \"employment_status\", must be one of #{allowable_values}"
      end
      allowable_values = ["company", "company,pay_group", "employments", "employments,company", "employments,company,pay_group", "employments,groups", "employments,groups,company", "employments,groups,company,pay_group", "employments,groups,home_location", "employments,groups,home_location,company", "employments,groups,home_location,company,pay_group", "employments,groups,home_location,manager", "employments,groups,home_location,manager,company", "employments,groups,home_location,manager,company,pay_group", "employments,groups,home_location,manager,pay_group", "employments,groups,home_location,manager,team", "employments,groups,home_location,manager,team,company", "employments,groups,home_location,manager,team,company,pay_group", "employments,groups,home_location,manager,team,pay_group", "employments,groups,home_location,pay_group", "employments,groups,home_location,team", "employments,groups,home_location,team,company", "employments,groups,home_location,team,company,pay_group", "employments,groups,home_location,team,pay_group", "employments,groups,home_location,work_location", "employments,groups,home_location,work_location,company", "employments,groups,home_location,work_location,company,pay_group", "employments,groups,home_location,work_location,manager", "employments,groups,home_location,work_location,manager,company", "employments,groups,home_location,work_location,manager,company,pay_group", "employments,groups,home_location,work_location,manager,pay_group", "employments,groups,home_location,work_location,manager,team", "employments,groups,home_location,work_location,manager,team,company", "employments,groups,home_location,work_location,manager,team,company,pay_group", "employments,groups,home_location,work_location,manager,team,pay_group", "employments,groups,home_location,work_location,pay_group", "employments,groups,home_location,work_location,team", "employments,groups,home_location,work_location,team,company", "employments,groups,home_location,work_location,team,company,pay_group", "employments,groups,home_location,work_location,team,pay_group", "employments,groups,manager", "employments,groups,manager,company", "employments,groups,manager,company,pay_group", "employments,groups,manager,pay_group", "employments,groups,manager,team", "employments,groups,manager,team,company", "employments,groups,manager,team,company,pay_group", "employments,groups,manager,team,pay_group", "employments,groups,pay_group", "employments,groups,team", "employments,groups,team,company", "employments,groups,team,company,pay_group", "employments,groups,team,pay_group", "employments,groups,work_location", "employments,groups,work_location,company", "employments,groups,work_location,company,pay_group", "employments,groups,work_location,manager", "employments,groups,work_location,manager,company", "employments,groups,work_location,manager,company,pay_group", "employments,groups,work_location,manager,pay_group", "employments,groups,work_location,manager,team", "employments,groups,work_location,manager,team,company", "employments,groups,work_location,manager,team,company,pay_group", "employments,groups,work_location,manager,team,pay_group", "employments,groups,work_location,pay_group", "employments,groups,work_location,team", "employments,groups,work_location,team,company", "employments,groups,work_location,team,company,pay_group", "employments,groups,work_location,team,pay_group", "employments,home_location", "employments,home_location,company", "employments,home_location,company,pay_group", "employments,home_location,manager", "employments,home_location,manager,company", "employments,home_location,manager,company,pay_group", "employments,home_location,manager,pay_group", "employments,home_location,manager,team", "employments,home_location,manager,team,company", "employments,home_location,manager,team,company,pay_group", "employments,home_location,manager,team,pay_group", "employments,home_location,pay_group", "employments,home_location,team", "employments,home_location,team,company", "employments,home_location,team,company,pay_group", "employments,home_location,team,pay_group", "employments,home_location,work_location", "employments,home_location,work_location,company", "employments,home_location,work_location,company,pay_group", "employments,home_location,work_location,manager", "employments,home_location,work_location,manager,company", "employments,home_location,work_location,manager,company,pay_group", "employments,home_location,work_location,manager,pay_group", "employments,home_location,work_location,manager,team", "employments,home_location,work_location,manager,team,company", "employments,home_location,work_location,manager,team,company,pay_group", "employments,home_location,work_location,manager,team,pay_group", "employments,home_location,work_location,pay_group", "employments,home_location,work_location,team", "employments,home_location,work_location,team,company", "employments,home_location,work_location,team,company,pay_group", "employments,home_location,work_location,team,pay_group", "employments,manager", "employments,manager,company", "employments,manager,company,pay_group", "employments,manager,pay_group", "employments,manager,team", "employments,manager,team,company", "employments,manager,team,company,pay_group", "employments,manager,team,pay_group", "employments,pay_group", "employments,team", "employments,team,company", "employments,team,company,pay_group", "employments,team,pay_group", "employments,work_location", "employments,work_location,company", "employments,work_location,company,pay_group", "employments,work_location,manager", "employments,work_location,manager,company", "employments,work_location,manager,company,pay_group", "employments,work_location,manager,pay_group", "employments,work_location,manager,team", "employments,work_location,manager,team,company", "employments,work_location,manager,team,company,pay_group", "employments,work_location,manager,team,pay_group", "employments,work_location,pay_group", "employments,work_location,team", "employments,work_location,team,company", "employments,work_location,team,company,pay_group", "employments,work_location,team,pay_group", "groups", "groups,company", "groups,company,pay_group", "groups,home_location", "groups,home_location,company", "groups,home_location,company,pay_group", "groups,home_location,manager", "groups,home_location,manager,company", "groups,home_location,manager,company,pay_group", "groups,home_location,manager,pay_group", "groups,home_location,manager,team", "groups,home_location,manager,team,company", "groups,home_location,manager,team,company,pay_group", "groups,home_location,manager,team,pay_group", "groups,home_location,pay_group", "groups,home_location,team", "groups,home_location,team,company", "groups,home_location,team,company,pay_group", "groups,home_location,team,pay_group", "groups,home_location,work_location", "groups,home_location,work_location,company", "groups,home_location,work_location,company,pay_group", "groups,home_location,work_location,manager", "groups,home_location,work_location,manager,company", "groups,home_location,work_location,manager,company,pay_group", "groups,home_location,work_location,manager,pay_group", "groups,home_location,work_location,manager,team", "groups,home_location,work_location,manager,team,company", "groups,home_location,work_location,manager,team,company,pay_group", "groups,home_location,work_location,manager,team,pay_group", "groups,home_location,work_location,pay_group", "groups,home_location,work_location,team", "groups,home_location,work_location,team,company", "groups,home_location,work_location,team,company,pay_group", "groups,home_location,work_location,team,pay_group", "groups,manager", "groups,manager,company", "groups,manager,company,pay_group", "groups,manager,pay_group", "groups,manager,team", "groups,manager,team,company", "groups,manager,team,company,pay_group", "groups,manager,team,pay_group", "groups,pay_group", "groups,team", "groups,team,company", "groups,team,company,pay_group", "groups,team,pay_group", "groups,work_location", "groups,work_location,company", "groups,work_location,company,pay_group", "groups,work_location,manager", "groups,work_location,manager,company", "groups,work_location,manager,company,pay_group", "groups,work_location,manager,pay_group", "groups,work_location,manager,team", "groups,work_location,manager,team,company", "groups,work_location,manager,team,company,pay_group", "groups,work_location,manager,team,pay_group", "groups,work_location,pay_group", "groups,work_location,team", "groups,work_location,team,company", "groups,work_location,team,company,pay_group", "groups,work_location,team,pay_group", "home_location", "home_location,company", "home_location,company,pay_group", "home_location,manager", "home_location,manager,company", "home_location,manager,company,pay_group", "home_location,manager,pay_group", "home_location,manager,team", "home_location,manager,team,company", "home_location,manager,team,company,pay_group", "home_location,manager,team,pay_group", "home_location,pay_group", "home_location,team", "home_location,team,company", "home_location,team,company,pay_group", "home_location,team,pay_group", "home_location,work_location", "home_location,work_location,company", "home_location,work_location,company,pay_group", "home_location,work_location,manager", "home_location,work_location,manager,company", "home_location,work_location,manager,company,pay_group", "home_location,work_location,manager,pay_group", "home_location,work_location,manager,team", "home_location,work_location,manager,team,company", "home_location,work_location,manager,team,company,pay_group", "home_location,work_location,manager,team,pay_group", "home_location,work_location,pay_group", "home_location,work_location,team", "home_location,work_location,team,company", "home_location,work_location,team,company,pay_group", "home_location,work_location,team,pay_group", "manager", "manager,company", "manager,company,pay_group", "manager,pay_group", "manager,team", "manager,team,company", "manager,team,company,pay_group", "manager,team,pay_group", "pay_group", "team", "team,company", "team,company,pay_group", "team,pay_group", "work_location", "work_location,company", "work_location,company,pay_group", "work_location,manager", "work_location,manager,company", "work_location,manager,company,pay_group", "work_location,manager,pay_group", "work_location,manager,team", "work_location,manager,team,company", "work_location,manager,team,company,pay_group", "work_location,manager,team,pay_group", "work_location,pay_group", "work_location,team", "work_location,team,company", "work_location,team,company,pay_group", "work_location,team,pay_group"]
      if @api_client.config.client_side_validation && opts[:'expand'] && !allowable_values.include?(opts[:'expand'])
        fail ArgumentError, "invalid value for \"expand\", must be one of #{allowable_values}"
      end
      allowable_values = ["employment_status", "employment_status,ethnicity", "employment_status,ethnicity,gender", "employment_status,ethnicity,gender,marital_status", "employment_status,ethnicity,marital_status", "employment_status,gender", "employment_status,gender,marital_status", "employment_status,marital_status", "ethnicity", "ethnicity,gender", "ethnicity,gender,marital_status", "ethnicity,marital_status", "gender", "gender,marital_status", "marital_status"]
      if @api_client.config.client_side_validation && opts[:'remote_fields'] && !allowable_values.include?(opts[:'remote_fields'])
        fail ArgumentError, "invalid value for \"remote_fields\", must be one of #{allowable_values}"
      end
      allowable_values = ["employment_status", "employment_status,ethnicity", "employment_status,ethnicity,gender", "employment_status,ethnicity,gender,marital_status", "employment_status,ethnicity,marital_status", "employment_status,gender", "employment_status,gender,marital_status", "employment_status,marital_status", "ethnicity", "ethnicity,gender", "ethnicity,gender,marital_status", "ethnicity,marital_status", "gender", "gender,marital_status", "marital_status"]
      if @api_client.config.client_side_validation && opts[:'show_enum_origins'] && !allowable_values.include?(opts[:'show_enum_origins'])
        fail ArgumentError, "invalid value for \"show_enum_origins\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/employees'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'company_id'] = opts[:'company_id'] if !opts[:'company_id'].nil?
      query_params[:'created_after'] = opts[:'created_after'] if !opts[:'created_after'].nil?
      query_params[:'created_before'] = opts[:'created_before'] if !opts[:'created_before'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'display_full_name'] = opts[:'display_full_name'] if !opts[:'display_full_name'].nil?
      query_params[:'employment_status'] = opts[:'employment_status'] if !opts[:'employment_status'].nil?
      query_params[:'employment_type'] = opts[:'employment_type'] if !opts[:'employment_type'].nil?
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?
      query_params[:'first_name'] = opts[:'first_name'] if !opts[:'first_name'].nil?
      query_params[:'groups'] = opts[:'groups'] if !opts[:'groups'].nil?
      query_params[:'home_location_id'] = opts[:'home_location_id'] if !opts[:'home_location_id'].nil?
      query_params[:'include_deleted_data'] = opts[:'include_deleted_data'] if !opts[:'include_deleted_data'].nil?
      query_params[:'include_remote_data'] = opts[:'include_remote_data'] if !opts[:'include_remote_data'].nil?
      query_params[:'include_sensitive_fields'] = opts[:'include_sensitive_fields'] if !opts[:'include_sensitive_fields'].nil?
      query_params[:'job_title'] = opts[:'job_title'] if !opts[:'job_title'].nil?
      query_params[:'last_name'] = opts[:'last_name'] if !opts[:'last_name'].nil?
      query_params[:'manager_id'] = opts[:'manager_id'] if !opts[:'manager_id'].nil?
      query_params[:'modified_after'] = opts[:'modified_after'] if !opts[:'modified_after'].nil?
      query_params[:'modified_before'] = opts[:'modified_before'] if !opts[:'modified_before'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'pay_group_id'] = opts[:'pay_group_id'] if !opts[:'pay_group_id'].nil?
      query_params[:'personal_email'] = opts[:'personal_email'] if !opts[:'personal_email'].nil?
      query_params[:'remote_fields'] = opts[:'remote_fields'] if !opts[:'remote_fields'].nil?
      query_params[:'remote_id'] = opts[:'remote_id'] if !opts[:'remote_id'].nil?
      query_params[:'show_enum_origins'] = opts[:'show_enum_origins'] if !opts[:'show_enum_origins'].nil?
      query_params[:'started_after'] = opts[:'started_after'] if !opts[:'started_after'].nil?
      query_params[:'started_before'] = opts[:'started_before'] if !opts[:'started_before'].nil?
      query_params[:'team_id'] = opts[:'team_id'] if !opts[:'team_id'].nil?
      query_params[:'terminated_after'] = opts[:'terminated_after'] if !opts[:'terminated_after'].nil?
      query_params[:'terminated_before'] = opts[:'terminated_before'] if !opts[:'terminated_before'].nil?
      query_params[:'work_email'] = opts[:'work_email'] if !opts[:'work_email'].nil?
      query_params[:'work_location_id'] = opts[:'work_location_id'] if !opts[:'work_location_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Account-Token'] = x_account_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaginatedEmployeeList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['tokenAuth']

      new_options = opts.merge(
        :operation => :"EmployeesApi.employees_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployeesApi#employees_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns metadata for `Employee` POSTs.
    # @param x_account_token [String] Token identifying the end user.
    # @param [Hash] opts the optional parameters
    # @return [MetaResponse]
    def employees_meta_post_retrieve(x_account_token, opts = {})
      data, _status_code, _headers = employees_meta_post_retrieve_with_http_info(x_account_token, opts)
      data
    end

    # Returns metadata for &#x60;Employee&#x60; POSTs.
    # @param x_account_token [String] Token identifying the end user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MetaResponse, Integer, Hash)>] MetaResponse data, response status code and response headers
    def employees_meta_post_retrieve_with_http_info(x_account_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployeesApi.employees_meta_post_retrieve ...'
      end
      # verify the required parameter 'x_account_token' is set
      if @api_client.config.client_side_validation && x_account_token.nil?
        fail ArgumentError, "Missing the required parameter 'x_account_token' when calling EmployeesApi.employees_meta_post_retrieve"
      end
      # resource path
      local_var_path = '/employees/meta/post'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Account-Token'] = x_account_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MetaResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['tokenAuth']

      new_options = opts.merge(
        :operation => :"EmployeesApi.employees_meta_post_retrieve",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployeesApi#employees_meta_post_retrieve\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns an `Employee` object with the given `id`.
    # @param x_account_token [String] Token identifying the end user.
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
    # @option opts [Boolean] :include_remote_data Whether to include the original data Merge fetched from the third-party to produce these models.
    # @option opts [Boolean] :include_sensitive_fields Whether to include sensitive fields (such as social security numbers) in the response.
    # @option opts [String] :remote_fields Deprecated. Use show_enum_origins.
    # @option opts [String] :show_enum_origins A comma separated list of enum field names for which you&#39;d like the original values to be returned, instead of Merge&#39;s normalized enum values. [Learn more](https://help.merge.dev/en/articles/8950958-show_enum_origins-query-parameter)
    # @return [Employee]
    def employees_retrieve(x_account_token, id, opts = {})
      data, _status_code, _headers = employees_retrieve_with_http_info(x_account_token, id, opts)
      data
    end

    # Returns an &#x60;Employee&#x60; object with the given &#x60;id&#x60;.
    # @param x_account_token [String] Token identifying the end user.
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
    # @option opts [Boolean] :include_remote_data Whether to include the original data Merge fetched from the third-party to produce these models.
    # @option opts [Boolean] :include_sensitive_fields Whether to include sensitive fields (such as social security numbers) in the response.
    # @option opts [String] :remote_fields Deprecated. Use show_enum_origins.
    # @option opts [String] :show_enum_origins A comma separated list of enum field names for which you&#39;d like the original values to be returned, instead of Merge&#39;s normalized enum values. [Learn more](https://help.merge.dev/en/articles/8950958-show_enum_origins-query-parameter)
    # @return [Array<(Employee, Integer, Hash)>] Employee data, response status code and response headers
    def employees_retrieve_with_http_info(x_account_token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployeesApi.employees_retrieve ...'
      end
      # verify the required parameter 'x_account_token' is set
      if @api_client.config.client_side_validation && x_account_token.nil?
        fail ArgumentError, "Missing the required parameter 'x_account_token' when calling EmployeesApi.employees_retrieve"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EmployeesApi.employees_retrieve"
      end
      allowable_values = ["company", "company,pay_group", "employments", "employments,company", "employments,company,pay_group", "employments,groups", "employments,groups,company", "employments,groups,company,pay_group", "employments,groups,home_location", "employments,groups,home_location,company", "employments,groups,home_location,company,pay_group", "employments,groups,home_location,manager", "employments,groups,home_location,manager,company", "employments,groups,home_location,manager,company,pay_group", "employments,groups,home_location,manager,pay_group", "employments,groups,home_location,manager,team", "employments,groups,home_location,manager,team,company", "employments,groups,home_location,manager,team,company,pay_group", "employments,groups,home_location,manager,team,pay_group", "employments,groups,home_location,pay_group", "employments,groups,home_location,team", "employments,groups,home_location,team,company", "employments,groups,home_location,team,company,pay_group", "employments,groups,home_location,team,pay_group", "employments,groups,home_location,work_location", "employments,groups,home_location,work_location,company", "employments,groups,home_location,work_location,company,pay_group", "employments,groups,home_location,work_location,manager", "employments,groups,home_location,work_location,manager,company", "employments,groups,home_location,work_location,manager,company,pay_group", "employments,groups,home_location,work_location,manager,pay_group", "employments,groups,home_location,work_location,manager,team", "employments,groups,home_location,work_location,manager,team,company", "employments,groups,home_location,work_location,manager,team,company,pay_group", "employments,groups,home_location,work_location,manager,team,pay_group", "employments,groups,home_location,work_location,pay_group", "employments,groups,home_location,work_location,team", "employments,groups,home_location,work_location,team,company", "employments,groups,home_location,work_location,team,company,pay_group", "employments,groups,home_location,work_location,team,pay_group", "employments,groups,manager", "employments,groups,manager,company", "employments,groups,manager,company,pay_group", "employments,groups,manager,pay_group", "employments,groups,manager,team", "employments,groups,manager,team,company", "employments,groups,manager,team,company,pay_group", "employments,groups,manager,team,pay_group", "employments,groups,pay_group", "employments,groups,team", "employments,groups,team,company", "employments,groups,team,company,pay_group", "employments,groups,team,pay_group", "employments,groups,work_location", "employments,groups,work_location,company", "employments,groups,work_location,company,pay_group", "employments,groups,work_location,manager", "employments,groups,work_location,manager,company", "employments,groups,work_location,manager,company,pay_group", "employments,groups,work_location,manager,pay_group", "employments,groups,work_location,manager,team", "employments,groups,work_location,manager,team,company", "employments,groups,work_location,manager,team,company,pay_group", "employments,groups,work_location,manager,team,pay_group", "employments,groups,work_location,pay_group", "employments,groups,work_location,team", "employments,groups,work_location,team,company", "employments,groups,work_location,team,company,pay_group", "employments,groups,work_location,team,pay_group", "employments,home_location", "employments,home_location,company", "employments,home_location,company,pay_group", "employments,home_location,manager", "employments,home_location,manager,company", "employments,home_location,manager,company,pay_group", "employments,home_location,manager,pay_group", "employments,home_location,manager,team", "employments,home_location,manager,team,company", "employments,home_location,manager,team,company,pay_group", "employments,home_location,manager,team,pay_group", "employments,home_location,pay_group", "employments,home_location,team", "employments,home_location,team,company", "employments,home_location,team,company,pay_group", "employments,home_location,team,pay_group", "employments,home_location,work_location", "employments,home_location,work_location,company", "employments,home_location,work_location,company,pay_group", "employments,home_location,work_location,manager", "employments,home_location,work_location,manager,company", "employments,home_location,work_location,manager,company,pay_group", "employments,home_location,work_location,manager,pay_group", "employments,home_location,work_location,manager,team", "employments,home_location,work_location,manager,team,company", "employments,home_location,work_location,manager,team,company,pay_group", "employments,home_location,work_location,manager,team,pay_group", "employments,home_location,work_location,pay_group", "employments,home_location,work_location,team", "employments,home_location,work_location,team,company", "employments,home_location,work_location,team,company,pay_group", "employments,home_location,work_location,team,pay_group", "employments,manager", "employments,manager,company", "employments,manager,company,pay_group", "employments,manager,pay_group", "employments,manager,team", "employments,manager,team,company", "employments,manager,team,company,pay_group", "employments,manager,team,pay_group", "employments,pay_group", "employments,team", "employments,team,company", "employments,team,company,pay_group", "employments,team,pay_group", "employments,work_location", "employments,work_location,company", "employments,work_location,company,pay_group", "employments,work_location,manager", "employments,work_location,manager,company", "employments,work_location,manager,company,pay_group", "employments,work_location,manager,pay_group", "employments,work_location,manager,team", "employments,work_location,manager,team,company", "employments,work_location,manager,team,company,pay_group", "employments,work_location,manager,team,pay_group", "employments,work_location,pay_group", "employments,work_location,team", "employments,work_location,team,company", "employments,work_location,team,company,pay_group", "employments,work_location,team,pay_group", "groups", "groups,company", "groups,company,pay_group", "groups,home_location", "groups,home_location,company", "groups,home_location,company,pay_group", "groups,home_location,manager", "groups,home_location,manager,company", "groups,home_location,manager,company,pay_group", "groups,home_location,manager,pay_group", "groups,home_location,manager,team", "groups,home_location,manager,team,company", "groups,home_location,manager,team,company,pay_group", "groups,home_location,manager,team,pay_group", "groups,home_location,pay_group", "groups,home_location,team", "groups,home_location,team,company", "groups,home_location,team,company,pay_group", "groups,home_location,team,pay_group", "groups,home_location,work_location", "groups,home_location,work_location,company", "groups,home_location,work_location,company,pay_group", "groups,home_location,work_location,manager", "groups,home_location,work_location,manager,company", "groups,home_location,work_location,manager,company,pay_group", "groups,home_location,work_location,manager,pay_group", "groups,home_location,work_location,manager,team", "groups,home_location,work_location,manager,team,company", "groups,home_location,work_location,manager,team,company,pay_group", "groups,home_location,work_location,manager,team,pay_group", "groups,home_location,work_location,pay_group", "groups,home_location,work_location,team", "groups,home_location,work_location,team,company", "groups,home_location,work_location,team,company,pay_group", "groups,home_location,work_location,team,pay_group", "groups,manager", "groups,manager,company", "groups,manager,company,pay_group", "groups,manager,pay_group", "groups,manager,team", "groups,manager,team,company", "groups,manager,team,company,pay_group", "groups,manager,team,pay_group", "groups,pay_group", "groups,team", "groups,team,company", "groups,team,company,pay_group", "groups,team,pay_group", "groups,work_location", "groups,work_location,company", "groups,work_location,company,pay_group", "groups,work_location,manager", "groups,work_location,manager,company", "groups,work_location,manager,company,pay_group", "groups,work_location,manager,pay_group", "groups,work_location,manager,team", "groups,work_location,manager,team,company", "groups,work_location,manager,team,company,pay_group", "groups,work_location,manager,team,pay_group", "groups,work_location,pay_group", "groups,work_location,team", "groups,work_location,team,company", "groups,work_location,team,company,pay_group", "groups,work_location,team,pay_group", "home_location", "home_location,company", "home_location,company,pay_group", "home_location,manager", "home_location,manager,company", "home_location,manager,company,pay_group", "home_location,manager,pay_group", "home_location,manager,team", "home_location,manager,team,company", "home_location,manager,team,company,pay_group", "home_location,manager,team,pay_group", "home_location,pay_group", "home_location,team", "home_location,team,company", "home_location,team,company,pay_group", "home_location,team,pay_group", "home_location,work_location", "home_location,work_location,company", "home_location,work_location,company,pay_group", "home_location,work_location,manager", "home_location,work_location,manager,company", "home_location,work_location,manager,company,pay_group", "home_location,work_location,manager,pay_group", "home_location,work_location,manager,team", "home_location,work_location,manager,team,company", "home_location,work_location,manager,team,company,pay_group", "home_location,work_location,manager,team,pay_group", "home_location,work_location,pay_group", "home_location,work_location,team", "home_location,work_location,team,company", "home_location,work_location,team,company,pay_group", "home_location,work_location,team,pay_group", "manager", "manager,company", "manager,company,pay_group", "manager,pay_group", "manager,team", "manager,team,company", "manager,team,company,pay_group", "manager,team,pay_group", "pay_group", "team", "team,company", "team,company,pay_group", "team,pay_group", "work_location", "work_location,company", "work_location,company,pay_group", "work_location,manager", "work_location,manager,company", "work_location,manager,company,pay_group", "work_location,manager,pay_group", "work_location,manager,team", "work_location,manager,team,company", "work_location,manager,team,company,pay_group", "work_location,manager,team,pay_group", "work_location,pay_group", "work_location,team", "work_location,team,company", "work_location,team,company,pay_group", "work_location,team,pay_group"]
      if @api_client.config.client_side_validation && opts[:'expand'] && !allowable_values.include?(opts[:'expand'])
        fail ArgumentError, "invalid value for \"expand\", must be one of #{allowable_values}"
      end
      allowable_values = ["employment_status", "employment_status,ethnicity", "employment_status,ethnicity,gender", "employment_status,ethnicity,gender,marital_status", "employment_status,ethnicity,marital_status", "employment_status,gender", "employment_status,gender,marital_status", "employment_status,marital_status", "ethnicity", "ethnicity,gender", "ethnicity,gender,marital_status", "ethnicity,marital_status", "gender", "gender,marital_status", "marital_status"]
      if @api_client.config.client_side_validation && opts[:'remote_fields'] && !allowable_values.include?(opts[:'remote_fields'])
        fail ArgumentError, "invalid value for \"remote_fields\", must be one of #{allowable_values}"
      end
      allowable_values = ["employment_status", "employment_status,ethnicity", "employment_status,ethnicity,gender", "employment_status,ethnicity,gender,marital_status", "employment_status,ethnicity,marital_status", "employment_status,gender", "employment_status,gender,marital_status", "employment_status,marital_status", "ethnicity", "ethnicity,gender", "ethnicity,gender,marital_status", "ethnicity,marital_status", "gender", "gender,marital_status", "marital_status"]
      if @api_client.config.client_side_validation && opts[:'show_enum_origins'] && !allowable_values.include?(opts[:'show_enum_origins'])
        fail ArgumentError, "invalid value for \"show_enum_origins\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/employees/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?
      query_params[:'include_remote_data'] = opts[:'include_remote_data'] if !opts[:'include_remote_data'].nil?
      query_params[:'include_sensitive_fields'] = opts[:'include_sensitive_fields'] if !opts[:'include_sensitive_fields'].nil?
      query_params[:'remote_fields'] = opts[:'remote_fields'] if !opts[:'remote_fields'].nil?
      query_params[:'show_enum_origins'] = opts[:'show_enum_origins'] if !opts[:'show_enum_origins'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Account-Token'] = x_account_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Employee'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['tokenAuth']

      new_options = opts.merge(
        :operation => :"EmployeesApi.employees_retrieve",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployeesApi#employees_retrieve\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
