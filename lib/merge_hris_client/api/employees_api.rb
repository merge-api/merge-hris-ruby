=begin
#Merge HRIS API

#The unified API for building rich integrations with multiple HR Information System platforms.

The version of the OpenAPI document: 1.0
Contact: hello@merge.dev
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'cgi'

module MergeHRISClient
  class EmployeesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Returns a list of `Employee` objects.
    # @param x_account_token [String] Token identifying the end user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :company_id If provided, will only return employees for this company.
    # @option opts [Time] :created_after If provided, will only return objects created after this datetime.
    # @option opts [Time] :created_before If provided, will only return objects created before this datetime.
    # @option opts [String] :cursor The pagination cursor value.
    # @option opts [String] :expand Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
    # @option opts [Boolean] :include_remote_data Whether to include the original data Merge fetched from the third-party to produce these models.
    # @option opts [String] :manager_id If provided, will only return employees for this manager.
    # @option opts [Time] :modified_after If provided, will only return objects modified after this datetime.
    # @option opts [Time] :modified_before If provided, will only return objects modified before this datetime.
    # @option opts [Integer] :page_size Number of results to return per page.
    # @option opts [String] :remote_id The API provider&#39;s ID for the given object.
    # @option opts [String] :team_id If provided, will only return employees for this team.
    # @option opts [String] :work_location_id If provided, will only return employees for this location.
    # @return [PaginatedEmployeeList]
    def employees_list(x_account_token, opts = {})
      data, _status_code, _headers = employees_list_with_http_info(x_account_token, opts)
      data
    end

    # Returns a list of &#x60;Employee&#x60; objects.
    # @param x_account_token [String] Token identifying the end user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :company_id If provided, will only return employees for this company.
    # @option opts [Time] :created_after If provided, will only return objects created after this datetime.
    # @option opts [Time] :created_before If provided, will only return objects created before this datetime.
    # @option opts [String] :cursor The pagination cursor value.
    # @option opts [String] :expand Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
    # @option opts [Boolean] :include_remote_data Whether to include the original data Merge fetched from the third-party to produce these models.
    # @option opts [String] :manager_id If provided, will only return employees for this manager.
    # @option opts [Time] :modified_after If provided, will only return objects modified after this datetime.
    # @option opts [Time] :modified_before If provided, will only return objects modified before this datetime.
    # @option opts [Integer] :page_size Number of results to return per page.
    # @option opts [String] :remote_id The API provider&#39;s ID for the given object.
    # @option opts [String] :team_id If provided, will only return employees for this team.
    # @option opts [String] :work_location_id If provided, will only return employees for this location.
    # @return [Array<(PaginatedEmployeeList, Integer, Hash)>] PaginatedEmployeeList data, response status code and response headers
    def employees_list_with_http_info(x_account_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployeesApi.employees_list ...'
      end
      # verify the required parameter 'x_account_token' is set
      if @api_client.config.client_side_validation && x_account_token.nil?
        fail ArgumentError, "Missing the required parameter 'x_account_token' when calling EmployeesApi.employees_list"
      end
      allowable_values = ["company", "employments", "employments,company", "employments,home_location", "employments,home_location,company", "employments,home_location,manager", "employments,home_location,manager,company", "employments,home_location,manager,team", "employments,home_location,manager,team,company", "employments,home_location,team", "employments,home_location,team,company", "employments,home_location,work_location", "employments,home_location,work_location,company", "employments,home_location,work_location,manager", "employments,home_location,work_location,manager,company", "employments,home_location,work_location,manager,team", "employments,home_location,work_location,manager,team,company", "employments,home_location,work_location,team", "employments,home_location,work_location,team,company", "employments,manager", "employments,manager,company", "employments,manager,team", "employments,manager,team,company", "employments,team", "employments,team,company", "employments,work_location", "employments,work_location,company", "employments,work_location,manager", "employments,work_location,manager,company", "employments,work_location,manager,team", "employments,work_location,manager,team,company", "employments,work_location,team", "employments,work_location,team,company", "home_location", "home_location,company", "home_location,manager", "home_location,manager,company", "home_location,manager,team", "home_location,manager,team,company", "home_location,team", "home_location,team,company", "home_location,work_location", "home_location,work_location,company", "home_location,work_location,manager", "home_location,work_location,manager,company", "home_location,work_location,manager,team", "home_location,work_location,manager,team,company", "home_location,work_location,team", "home_location,work_location,team,company", "manager", "manager,company", "manager,team", "manager,team,company", "team", "team,company", "work_location", "work_location,company", "work_location,manager", "work_location,manager,company", "work_location,manager,team", "work_location,manager,team,company", "work_location,team", "work_location,team,company"]
      if @api_client.config.client_side_validation && opts[:'expand'] && !allowable_values.include?(opts[:'expand'])
        fail ArgumentError, "invalid value for \"expand\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/employees'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'company_id'] = opts[:'company_id'] if !opts[:'company_id'].nil?
      query_params[:'created_after'] = opts[:'created_after'] if !opts[:'created_after'].nil?
      query_params[:'created_before'] = opts[:'created_before'] if !opts[:'created_before'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?
      query_params[:'include_remote_data'] = opts[:'include_remote_data'] if !opts[:'include_remote_data'].nil?
      query_params[:'manager_id'] = opts[:'manager_id'] if !opts[:'manager_id'].nil?
      query_params[:'modified_after'] = opts[:'modified_after'] if !opts[:'modified_after'].nil?
      query_params[:'modified_before'] = opts[:'modified_before'] if !opts[:'modified_before'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'remote_id'] = opts[:'remote_id'] if !opts[:'remote_id'].nil?
      query_params[:'team_id'] = opts[:'team_id'] if !opts[:'team_id'].nil?
      query_params[:'work_location_id'] = opts[:'work_location_id'] if !opts[:'work_location_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Account-Token'] = x_account_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaginatedEmployeeList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['tokenAuth']

      new_options = opts.merge(
        :operation => :"EmployeesApi.employees_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployeesApi#employees_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns an `Employee` object with the given `id`.
    # @param x_account_token [String] Token identifying the end user.
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
    # @option opts [Boolean] :include_remote_data Whether to include the original data Merge fetched from the third-party to produce these models.
    # @return [Employee]
    def employees_retrieve(x_account_token, id, opts = {})
      data, _status_code, _headers = employees_retrieve_with_http_info(x_account_token, id, opts)
      data
    end

    # Returns an &#x60;Employee&#x60; object with the given &#x60;id&#x60;.
    # @param x_account_token [String] Token identifying the end user.
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
    # @option opts [Boolean] :include_remote_data Whether to include the original data Merge fetched from the third-party to produce these models.
    # @return [Array<(Employee, Integer, Hash)>] Employee data, response status code and response headers
    def employees_retrieve_with_http_info(x_account_token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployeesApi.employees_retrieve ...'
      end
      # verify the required parameter 'x_account_token' is set
      if @api_client.config.client_side_validation && x_account_token.nil?
        fail ArgumentError, "Missing the required parameter 'x_account_token' when calling EmployeesApi.employees_retrieve"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EmployeesApi.employees_retrieve"
      end
      allowable_values = ["company", "employments", "employments,company", "employments,home_location", "employments,home_location,company", "employments,home_location,manager", "employments,home_location,manager,company", "employments,home_location,manager,team", "employments,home_location,manager,team,company", "employments,home_location,team", "employments,home_location,team,company", "employments,home_location,work_location", "employments,home_location,work_location,company", "employments,home_location,work_location,manager", "employments,home_location,work_location,manager,company", "employments,home_location,work_location,manager,team", "employments,home_location,work_location,manager,team,company", "employments,home_location,work_location,team", "employments,home_location,work_location,team,company", "employments,manager", "employments,manager,company", "employments,manager,team", "employments,manager,team,company", "employments,team", "employments,team,company", "employments,work_location", "employments,work_location,company", "employments,work_location,manager", "employments,work_location,manager,company", "employments,work_location,manager,team", "employments,work_location,manager,team,company", "employments,work_location,team", "employments,work_location,team,company", "home_location", "home_location,company", "home_location,manager", "home_location,manager,company", "home_location,manager,team", "home_location,manager,team,company", "home_location,team", "home_location,team,company", "home_location,work_location", "home_location,work_location,company", "home_location,work_location,manager", "home_location,work_location,manager,company", "home_location,work_location,manager,team", "home_location,work_location,manager,team,company", "home_location,work_location,team", "home_location,work_location,team,company", "manager", "manager,company", "manager,team", "manager,team,company", "team", "team,company", "work_location", "work_location,company", "work_location,manager", "work_location,manager,company", "work_location,manager,team", "work_location,manager,team,company", "work_location,team", "work_location,team,company"]
      if @api_client.config.client_side_validation && opts[:'expand'] && !allowable_values.include?(opts[:'expand'])
        fail ArgumentError, "invalid value for \"expand\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/employees/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?
      query_params[:'include_remote_data'] = opts[:'include_remote_data'] if !opts[:'include_remote_data'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Account-Token'] = x_account_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Employee'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['tokenAuth']

      new_options = opts.merge(
        :operation => :"EmployeesApi.employees_retrieve",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployeesApi#employees_retrieve\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
