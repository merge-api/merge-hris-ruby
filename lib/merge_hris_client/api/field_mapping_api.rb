=begin
#Merge HRIS API

#The unified API for building rich integrations with multiple HR Information System platforms.

The version of the OpenAPI document: 1.0
Contact: hello@merge.dev
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.1.1

=end

require 'cgi'

module MergeHRISClient
  class FieldMappingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create new Field Mappings that will be available after the next scheduled sync. This will cause the next sync for this Linked Account to sync **ALL** data from start.
    # @param x_account_token [String] Token identifying the end user.
    # @param create_field_mapping_request [CreateFieldMappingRequest] 
    # @param [Hash] opts the optional parameters
    # @return [FieldMappingInstanceResponse]
    def field_mappings_create(x_account_token, create_field_mapping_request, opts = {})
      data, _status_code, _headers = field_mappings_create_with_http_info(x_account_token, create_field_mapping_request, opts)
      data
    end

    # Create new Field Mappings that will be available after the next scheduled sync. This will cause the next sync for this Linked Account to sync **ALL** data from start.
    # @param x_account_token [String] Token identifying the end user.
    # @param create_field_mapping_request [CreateFieldMappingRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FieldMappingInstanceResponse, Integer, Hash)>] FieldMappingInstanceResponse data, response status code and response headers
    def field_mappings_create_with_http_info(x_account_token, create_field_mapping_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FieldMappingApi.field_mappings_create ...'
      end
      # verify the required parameter 'x_account_token' is set
      if @api_client.config.client_side_validation && x_account_token.nil?
        fail ArgumentError, "Missing the required parameter 'x_account_token' when calling FieldMappingApi.field_mappings_create"
      end
      # verify the required parameter 'create_field_mapping_request' is set
      if @api_client.config.client_side_validation && create_field_mapping_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_field_mapping_request' when calling FieldMappingApi.field_mappings_create"
      end
      # resource path
      local_var_path = '/field-mappings'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])
      header_params[:'X-Account-Token'] = x_account_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_field_mapping_request)

      # return_type
      return_type = opts[:debug_return_type] || 'FieldMappingInstanceResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['tokenAuth']

      new_options = opts.merge(
        :operation => :"FieldMappingApi.field_mappings_create",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FieldMappingApi#field_mappings_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes Field Mappings for a Linked Account. All data related to this Field Mapping will be deleted and these changes will be reflected after the next scheduled sync. This will cause the next sync for this Linked Account to sync **ALL** data from start.
    # @param x_account_token [String] Token identifying the end user.
    # @param field_mapping_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [FieldMappingInstanceResponse]
    def field_mappings_destroy(x_account_token, field_mapping_id, opts = {})
      data, _status_code, _headers = field_mappings_destroy_with_http_info(x_account_token, field_mapping_id, opts)
      data
    end

    # Deletes Field Mappings for a Linked Account. All data related to this Field Mapping will be deleted and these changes will be reflected after the next scheduled sync. This will cause the next sync for this Linked Account to sync **ALL** data from start.
    # @param x_account_token [String] Token identifying the end user.
    # @param field_mapping_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FieldMappingInstanceResponse, Integer, Hash)>] FieldMappingInstanceResponse data, response status code and response headers
    def field_mappings_destroy_with_http_info(x_account_token, field_mapping_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FieldMappingApi.field_mappings_destroy ...'
      end
      # verify the required parameter 'x_account_token' is set
      if @api_client.config.client_side_validation && x_account_token.nil?
        fail ArgumentError, "Missing the required parameter 'x_account_token' when calling FieldMappingApi.field_mappings_destroy"
      end
      # verify the required parameter 'field_mapping_id' is set
      if @api_client.config.client_side_validation && field_mapping_id.nil?
        fail ArgumentError, "Missing the required parameter 'field_mapping_id' when calling FieldMappingApi.field_mappings_destroy"
      end
      # resource path
      local_var_path = '/field-mappings/{field_mapping_id}'.sub('{' + 'field_mapping_id' + '}', CGI.escape(field_mapping_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Account-Token'] = x_account_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FieldMappingInstanceResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['tokenAuth']

      new_options = opts.merge(
        :operation => :"FieldMappingApi.field_mappings_destroy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FieldMappingApi#field_mappings_destroy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or update existing Field Mappings for a Linked Account. Changes will be reflected after the next scheduled sync. This will cause the next sync for this Linked Account to sync **ALL** data from start.
    # @param x_account_token [String] Token identifying the end user.
    # @param field_mapping_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [PatchedEditFieldMappingRequest] :patched_edit_field_mapping_request 
    # @return [FieldMappingInstanceResponse]
    def field_mappings_partial_update(x_account_token, field_mapping_id, opts = {})
      data, _status_code, _headers = field_mappings_partial_update_with_http_info(x_account_token, field_mapping_id, opts)
      data
    end

    # Create or update existing Field Mappings for a Linked Account. Changes will be reflected after the next scheduled sync. This will cause the next sync for this Linked Account to sync **ALL** data from start.
    # @param x_account_token [String] Token identifying the end user.
    # @param field_mapping_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [PatchedEditFieldMappingRequest] :patched_edit_field_mapping_request 
    # @return [Array<(FieldMappingInstanceResponse, Integer, Hash)>] FieldMappingInstanceResponse data, response status code and response headers
    def field_mappings_partial_update_with_http_info(x_account_token, field_mapping_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FieldMappingApi.field_mappings_partial_update ...'
      end
      # verify the required parameter 'x_account_token' is set
      if @api_client.config.client_side_validation && x_account_token.nil?
        fail ArgumentError, "Missing the required parameter 'x_account_token' when calling FieldMappingApi.field_mappings_partial_update"
      end
      # verify the required parameter 'field_mapping_id' is set
      if @api_client.config.client_side_validation && field_mapping_id.nil?
        fail ArgumentError, "Missing the required parameter 'field_mapping_id' when calling FieldMappingApi.field_mappings_partial_update"
      end
      # resource path
      local_var_path = '/field-mappings/{field_mapping_id}'.sub('{' + 'field_mapping_id' + '}', CGI.escape(field_mapping_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])
      header_params[:'X-Account-Token'] = x_account_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'patched_edit_field_mapping_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'FieldMappingInstanceResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['tokenAuth']

      new_options = opts.merge(
        :operation => :"FieldMappingApi.field_mappings_partial_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FieldMappingApi#field_mappings_partial_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all Field Mappings for this Linked Account. Field Mappings are mappings between third-party Remote Fields and user defined Merge fields. [Learn more](https://docs.merge.dev/supplemental-data/field-mappings/overview/).
    # @param x_account_token [String] Token identifying the end user.
    # @param [Hash] opts the optional parameters
    # @return [FieldMappingApiInstanceResponse]
    def field_mappings_retrieve(x_account_token, opts = {})
      data, _status_code, _headers = field_mappings_retrieve_with_http_info(x_account_token, opts)
      data
    end

    # Get all Field Mappings for this Linked Account. Field Mappings are mappings between third-party Remote Fields and user defined Merge fields. [Learn more](https://docs.merge.dev/supplemental-data/field-mappings/overview/).
    # @param x_account_token [String] Token identifying the end user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(FieldMappingApiInstanceResponse, Integer, Hash)>] FieldMappingApiInstanceResponse data, response status code and response headers
    def field_mappings_retrieve_with_http_info(x_account_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FieldMappingApi.field_mappings_retrieve ...'
      end
      # verify the required parameter 'x_account_token' is set
      if @api_client.config.client_side_validation && x_account_token.nil?
        fail ArgumentError, "Missing the required parameter 'x_account_token' when calling FieldMappingApi.field_mappings_retrieve"
      end
      # resource path
      local_var_path = '/field-mappings'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Account-Token'] = x_account_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FieldMappingApiInstanceResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['tokenAuth']

      new_options = opts.merge(
        :operation => :"FieldMappingApi.field_mappings_retrieve",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FieldMappingApi#field_mappings_retrieve\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all remote fields for a Linked Account. Remote fields are third-party fields that are accessible after initial sync if remote_data is enabled. You can use remote fields to override existing Merge fields or map a new Merge field. [Learn more](https://docs.merge.dev/supplemental-data/field-mappings/overview/).
    # @param x_account_token [String] Token identifying the end user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :common_models A comma seperated list of Common Model names. If included, will only return Remote Fields for those Common Models.
    # @option opts [String] :include_example_values If true, will include example values, where available, for remote fields in the 3rd party platform. These examples come from active data from your customers.
    # @return [RemoteFieldAPIResponse]
    def remote_fields_retrieve(x_account_token, opts = {})
      data, _status_code, _headers = remote_fields_retrieve_with_http_info(x_account_token, opts)
      data
    end

    # Get all remote fields for a Linked Account. Remote fields are third-party fields that are accessible after initial sync if remote_data is enabled. You can use remote fields to override existing Merge fields or map a new Merge field. [Learn more](https://docs.merge.dev/supplemental-data/field-mappings/overview/).
    # @param x_account_token [String] Token identifying the end user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :common_models A comma seperated list of Common Model names. If included, will only return Remote Fields for those Common Models.
    # @option opts [String] :include_example_values If true, will include example values, where available, for remote fields in the 3rd party platform. These examples come from active data from your customers.
    # @return [Array<(RemoteFieldAPIResponse, Integer, Hash)>] RemoteFieldAPIResponse data, response status code and response headers
    def remote_fields_retrieve_with_http_info(x_account_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FieldMappingApi.remote_fields_retrieve ...'
      end
      # verify the required parameter 'x_account_token' is set
      if @api_client.config.client_side_validation && x_account_token.nil?
        fail ArgumentError, "Missing the required parameter 'x_account_token' when calling FieldMappingApi.remote_fields_retrieve"
      end
      # resource path
      local_var_path = '/remote-fields'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'common_models'] = opts[:'common_models'] if !opts[:'common_models'].nil?
      query_params[:'include_example_values'] = opts[:'include_example_values'] if !opts[:'include_example_values'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Account-Token'] = x_account_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RemoteFieldAPIResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['tokenAuth']

      new_options = opts.merge(
        :operation => :"FieldMappingApi.remote_fields_retrieve",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FieldMappingApi#remote_fields_retrieve\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all organization-wide Target Fields, this will not include any Linked Account specific Target Fields. Organization-wide Target Fields are additional fields appended to the Merge Common Model for all Linked Accounts in a category. [Learn more](https://docs.merge.dev/supplemental-data/field-mappings/target-fields/).
    # @param x_account_token [String] Token identifying the end user.
    # @param [Hash] opts the optional parameters
    # @return [ExternalTargetFieldAPIResponse]
    def target_fields_retrieve(x_account_token, opts = {})
      data, _status_code, _headers = target_fields_retrieve_with_http_info(x_account_token, opts)
      data
    end

    # Get all organization-wide Target Fields, this will not include any Linked Account specific Target Fields. Organization-wide Target Fields are additional fields appended to the Merge Common Model for all Linked Accounts in a category. [Learn more](https://docs.merge.dev/supplemental-data/field-mappings/target-fields/).
    # @param x_account_token [String] Token identifying the end user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExternalTargetFieldAPIResponse, Integer, Hash)>] ExternalTargetFieldAPIResponse data, response status code and response headers
    def target_fields_retrieve_with_http_info(x_account_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FieldMappingApi.target_fields_retrieve ...'
      end
      # verify the required parameter 'x_account_token' is set
      if @api_client.config.client_side_validation && x_account_token.nil?
        fail ArgumentError, "Missing the required parameter 'x_account_token' when calling FieldMappingApi.target_fields_retrieve"
      end
      # resource path
      local_var_path = '/target-fields'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Account-Token'] = x_account_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ExternalTargetFieldAPIResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['tokenAuth']

      new_options = opts.merge(
        :operation => :"FieldMappingApi.target_fields_retrieve",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FieldMappingApi#target_fields_retrieve\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
