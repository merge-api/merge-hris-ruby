=begin
#Merge HRIS API

#The unified API for building rich integrations with multiple HR Information System platforms.

The version of the OpenAPI document: 1.0
Contact: hello@merge.dev
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.1.1

=end

require 'date'
require 'time'

module MergeHRISClient
  class FieldMappingApiInstanceResponse
    attr_accessor :benefit

    attr_accessor :employer_benefit

    attr_accessor :company

    attr_accessor :employee_payroll_run

    attr_accessor :employee

    attr_accessor :employment

    attr_accessor :location

    attr_accessor :payroll_run

    attr_accessor :team

    attr_accessor :time_off

    attr_accessor :time_off_balance

    attr_accessor :bank_info

    attr_accessor :pay_group

    attr_accessor :group

    attr_accessor :dependent

    attr_accessor :timesheet_entry

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'benefit' => :'Benefit',
        :'employer_benefit' => :'EmployerBenefit',
        :'company' => :'Company',
        :'employee_payroll_run' => :'EmployeePayrollRun',
        :'employee' => :'Employee',
        :'employment' => :'Employment',
        :'location' => :'Location',
        :'payroll_run' => :'PayrollRun',
        :'team' => :'Team',
        :'time_off' => :'TimeOff',
        :'time_off_balance' => :'TimeOffBalance',
        :'bank_info' => :'BankInfo',
        :'pay_group' => :'PayGroup',
        :'group' => :'Group',
        :'dependent' => :'Dependent',
        :'timesheet_entry' => :'TimesheetEntry'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'benefit' => :'Array<FieldMappingApiInstance>',
        :'employer_benefit' => :'Array<FieldMappingApiInstance>',
        :'company' => :'Array<FieldMappingApiInstance>',
        :'employee_payroll_run' => :'Array<FieldMappingApiInstance>',
        :'employee' => :'Array<FieldMappingApiInstance>',
        :'employment' => :'Array<FieldMappingApiInstance>',
        :'location' => :'Array<FieldMappingApiInstance>',
        :'payroll_run' => :'Array<FieldMappingApiInstance>',
        :'team' => :'Array<FieldMappingApiInstance>',
        :'time_off' => :'Array<FieldMappingApiInstance>',
        :'time_off_balance' => :'Array<FieldMappingApiInstance>',
        :'bank_info' => :'Array<FieldMappingApiInstance>',
        :'pay_group' => :'Array<FieldMappingApiInstance>',
        :'group' => :'Array<FieldMappingApiInstance>',
        :'dependent' => :'Array<FieldMappingApiInstance>',
        :'timesheet_entry' => :'Array<FieldMappingApiInstance>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `MergeHRISClient::FieldMappingApiInstanceResponse` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `MergeHRISClient::FieldMappingApiInstanceResponse`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'benefit')
        if (value = attributes[:'benefit']).is_a?(Array)
          self.benefit = value
        end
      end

      if attributes.key?(:'employer_benefit')
        if (value = attributes[:'employer_benefit']).is_a?(Array)
          self.employer_benefit = value
        end
      end

      if attributes.key?(:'company')
        if (value = attributes[:'company']).is_a?(Array)
          self.company = value
        end
      end

      if attributes.key?(:'employee_payroll_run')
        if (value = attributes[:'employee_payroll_run']).is_a?(Array)
          self.employee_payroll_run = value
        end
      end

      if attributes.key?(:'employee')
        if (value = attributes[:'employee']).is_a?(Array)
          self.employee = value
        end
      end

      if attributes.key?(:'employment')
        if (value = attributes[:'employment']).is_a?(Array)
          self.employment = value
        end
      end

      if attributes.key?(:'location')
        if (value = attributes[:'location']).is_a?(Array)
          self.location = value
        end
      end

      if attributes.key?(:'payroll_run')
        if (value = attributes[:'payroll_run']).is_a?(Array)
          self.payroll_run = value
        end
      end

      if attributes.key?(:'team')
        if (value = attributes[:'team']).is_a?(Array)
          self.team = value
        end
      end

      if attributes.key?(:'time_off')
        if (value = attributes[:'time_off']).is_a?(Array)
          self.time_off = value
        end
      end

      if attributes.key?(:'time_off_balance')
        if (value = attributes[:'time_off_balance']).is_a?(Array)
          self.time_off_balance = value
        end
      end

      if attributes.key?(:'bank_info')
        if (value = attributes[:'bank_info']).is_a?(Array)
          self.bank_info = value
        end
      end

      if attributes.key?(:'pay_group')
        if (value = attributes[:'pay_group']).is_a?(Array)
          self.pay_group = value
        end
      end

      if attributes.key?(:'group')
        if (value = attributes[:'group']).is_a?(Array)
          self.group = value
        end
      end

      if attributes.key?(:'dependent')
        if (value = attributes[:'dependent']).is_a?(Array)
          self.dependent = value
        end
      end

      if attributes.key?(:'timesheet_entry')
        if (value = attributes[:'timesheet_entry']).is_a?(Array)
          self.timesheet_entry = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          benefit == o.benefit &&
          employer_benefit == o.employer_benefit &&
          company == o.company &&
          employee_payroll_run == o.employee_payroll_run &&
          employee == o.employee &&
          employment == o.employment &&
          location == o.location &&
          payroll_run == o.payroll_run &&
          team == o.team &&
          time_off == o.time_off &&
          time_off_balance == o.time_off_balance &&
          bank_info == o.bank_info &&
          pay_group == o.pay_group &&
          group == o.group &&
          dependent == o.dependent &&
          timesheet_entry == o.timesheet_entry
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [benefit, employer_benefit, company, employee_payroll_run, employee, employment, location, payroll_run, team, time_off, time_off_balance, bank_info, pay_group, group, dependent, timesheet_entry].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = MergeHRISClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
