=begin
#Merge HRIS API

#The unified API for building rich integrations with multiple HR Information System platforms.

The version of the OpenAPI document: 1.0
Contact: hello@merge.dev
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.1.1

=end

require 'date'
require 'time'

module MergeHRISClient
  class AuditLogEvent
    attr_accessor :id

    # The User's full name at the time of this Event occurring.
    attr_accessor :user_name

    # The User's email at the time of this Event occurring.
    attr_accessor :user_email

    # Designates the role of the user (or SYSTEM/API if action not taken by a user) at the time of this Event occurring.  * `ADMIN` - ADMIN * `DEVELOPER` - DEVELOPER * `MEMBER` - MEMBER * `API` - API * `SYSTEM` - SYSTEM * `MERGE_TEAM` - MERGE_TEAM
    attr_accessor :role

    attr_accessor :ip_address

    # Designates the type of event that occurred.  * `CREATED_REMOTE_PRODUCTION_API_KEY` - CREATED_REMOTE_PRODUCTION_API_KEY * `DELETED_REMOTE_PRODUCTION_API_KEY` - DELETED_REMOTE_PRODUCTION_API_KEY * `CREATED_TEST_API_KEY` - CREATED_TEST_API_KEY * `DELETED_TEST_API_KEY` - DELETED_TEST_API_KEY * `REGENERATED_PRODUCTION_API_KEY` - REGENERATED_PRODUCTION_API_KEY * `INVITED_USER` - INVITED_USER * `TWO_FACTOR_AUTH_ENABLED` - TWO_FACTOR_AUTH_ENABLED * `TWO_FACTOR_AUTH_DISABLED` - TWO_FACTOR_AUTH_DISABLED * `DELETED_LINKED_ACCOUNT` - DELETED_LINKED_ACCOUNT * `CREATED_DESTINATION` - CREATED_DESTINATION * `DELETED_DESTINATION` - DELETED_DESTINATION * `CHANGED_DESTINATION` - CHANGED_DESTINATION * `CHANGED_SCOPES` - CHANGED_SCOPES * `CHANGED_PERSONAL_INFORMATION` - CHANGED_PERSONAL_INFORMATION * `CHANGED_ORGANIZATION_SETTINGS` - CHANGED_ORGANIZATION_SETTINGS * `ENABLED_INTEGRATION` - ENABLED_INTEGRATION * `DISABLED_INTEGRATION` - DISABLED_INTEGRATION * `ENABLED_CATEGORY` - ENABLED_CATEGORY * `DISABLED_CATEGORY` - DISABLED_CATEGORY * `CHANGED_PASSWORD` - CHANGED_PASSWORD * `RESET_PASSWORD` - RESET_PASSWORD * `ENABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION` - ENABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION * `ENABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT` - ENABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT * `DISABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION` - DISABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION * `DISABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT` - DISABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT * `CREATED_INTEGRATION_WIDE_FIELD_MAPPING` - CREATED_INTEGRATION_WIDE_FIELD_MAPPING * `CREATED_LINKED_ACCOUNT_FIELD_MAPPING` - CREATED_LINKED_ACCOUNT_FIELD_MAPPING * `CHANGED_INTEGRATION_WIDE_FIELD_MAPPING` - CHANGED_INTEGRATION_WIDE_FIELD_MAPPING * `CHANGED_LINKED_ACCOUNT_FIELD_MAPPING` - CHANGED_LINKED_ACCOUNT_FIELD_MAPPING * `DELETED_INTEGRATION_WIDE_FIELD_MAPPING` - DELETED_INTEGRATION_WIDE_FIELD_MAPPING * `DELETED_LINKED_ACCOUNT_FIELD_MAPPING` - DELETED_LINKED_ACCOUNT_FIELD_MAPPING * `FORCED_LINKED_ACCOUNT_RESYNC` - FORCED_LINKED_ACCOUNT_RESYNC * `MUTED_ISSUE` - MUTED_ISSUE * `GENERATED_MAGIC_LINK` - GENERATED_MAGIC_LINK * `ENABLED_MERGE_WEBHOOK` - ENABLED_MERGE_WEBHOOK * `DISABLED_MERGE_WEBHOOK` - DISABLED_MERGE_WEBHOOK * `MERGE_WEBHOOK_TARGET_CHANGED` - MERGE_WEBHOOK_TARGET_CHANGED * `END_USER_CREDENTIALS_ACCESSED` - END_USER_CREDENTIALS_ACCESSED
    attr_accessor :event_type

    attr_accessor :event_description

    attr_accessor :created_at

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'user_name' => :'user_name',
        :'user_email' => :'user_email',
        :'role' => :'role',
        :'ip_address' => :'ip_address',
        :'event_type' => :'event_type',
        :'event_description' => :'event_description',
        :'created_at' => :'created_at'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'user_name' => :'String',
        :'user_email' => :'String',
        :'role' => :'RoleEnum',
        :'ip_address' => :'String',
        :'event_type' => :'EventTypeEnum',
        :'event_description' => :'String',
        :'created_at' => :'Time'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'user_name',
        :'user_email',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `MergeHRISClient::AuditLogEvent` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `MergeHRISClient::AuditLogEvent`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'user_name')
        self.user_name = attributes[:'user_name']
      end

      if attributes.key?(:'user_email')
        self.user_email = attributes[:'user_email']
      end

      if attributes.key?(:'role')
        self.role = attributes[:'role']
      end

      if attributes.key?(:'ip_address')
        self.ip_address = attributes[:'ip_address']
      end

      if attributes.key?(:'event_type')
        self.event_type = attributes[:'event_type']
      end

      if attributes.key?(:'event_description')
        self.event_description = attributes[:'event_description']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@user_name.nil? && @user_name.to_s.length > 200
        invalid_properties.push('invalid value for "user_name", the character length must be smaller than or equal to 200.')
      end

      if !@user_email.nil? && @user_email.to_s.length > 254
        invalid_properties.push('invalid value for "user_email", the character length must be smaller than or equal to 254.')
      end

      if @role.nil?
        invalid_properties.push('invalid value for "role", role cannot be nil.')
      end

      if @ip_address.nil?
        invalid_properties.push('invalid value for "ip_address", ip_address cannot be nil.')
      end

      if @ip_address.to_s.length > 45
        invalid_properties.push('invalid value for "ip_address", the character length must be smaller than or equal to 45.')
      end

      if @event_type.nil?
        invalid_properties.push('invalid value for "event_type", event_type cannot be nil.')
      end

      if @event_description.nil?
        invalid_properties.push('invalid value for "event_description", event_description cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@user_name.nil? && @user_name.to_s.length > 200
      return false if !@user_email.nil? && @user_email.to_s.length > 254
      return false if @role.nil?
      return false if @ip_address.nil?
      return false if @ip_address.to_s.length > 45
      return false if @event_type.nil?
      return false if @event_description.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] user_name Value to be assigned
    def user_name=(user_name)
      if !user_name.nil? && user_name.to_s.length > 200
        fail ArgumentError, 'invalid value for "user_name", the character length must be smaller than or equal to 200.'
      end

      @user_name = user_name
    end

    # Custom attribute writer method with validation
    # @param [Object] user_email Value to be assigned
    def user_email=(user_email)
      if !user_email.nil? && user_email.to_s.length > 254
        fail ArgumentError, 'invalid value for "user_email", the character length must be smaller than or equal to 254.'
      end

      @user_email = user_email
    end

    # Custom attribute writer method with validation
    # @param [Object] ip_address Value to be assigned
    def ip_address=(ip_address)
      if ip_address.nil?
        fail ArgumentError, 'ip_address cannot be nil'
      end

      if ip_address.to_s.length > 45
        fail ArgumentError, 'invalid value for "ip_address", the character length must be smaller than or equal to 45.'
      end

      @ip_address = ip_address
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          user_name == o.user_name &&
          user_email == o.user_email &&
          role == o.role &&
          ip_address == o.ip_address &&
          event_type == o.event_type &&
          event_description == o.event_description &&
          created_at == o.created_at
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, user_name, user_email, role, ip_address, event_type, event_description, created_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = MergeHRISClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
